{
  "version": 3,
  "sources": ["../../google-maps-react-markers/src/hooks/useScript.js", "../../google-maps-react-markers/src/hooks/useGoogleMaps.js", "../../google-maps-react-markers/src/utils/utils.js", "../../google-maps-react-markers/src/hooks/useMemoCompare.js", "../../google-maps-react-markers/src/map/overlay.js", "../../google-maps-react-markers/src/map/overlay-view.js", "../../google-maps-react-markers/src/map/markers.js", "../../google-maps-react-markers/src/map/map.js", "../../google-maps-react-markers/src/google-map.js"],
  "sourcesContent": ["/* eslint-disable no-unused-expressions */\nimport { useEffect, useState } from 'react'\n\n/**\n * @description Hook to load external script.\n * @param {Object} script - Script to load.\n * @param {string} script.src - Script source.\n * @param {Object} [script.attributes] - Attributes to add to the script tag.\n * @param {Object} [script.callbacks] - Callbacks executed on completion.\n * @param {Function} [script.callbacks.onLoadCallback] - Callback executed on completion in case of success.\n * @param {Function} [script.callbacks.onErrorCallback] - Callbacks executed on completion in case of error.\n * @param {string} [script.elementIdToAppend] - HTML element id to append the script to. Default is HTML HEAD.\n * @returns {\"idle\" | \"loading\" | \"ready\" | \"error\"} status\n *\n * @example\n * const status = useScript({\n * \t\tsrc: \"https://script-to-load.js\",\n * \t\tattributes: { id: \"scriptId\", class: \"script-class\" },\n * \t\tcallbacks: {\n * \t\t\tonLoadCallback: onLoadFunc,\n * \t\t\tonErrorCallback: onErrorFunc,\n * \t\t},\n * \t\telementIdToAppend: \"script-container\"\n * })\n */\n\nexport const useScript = (\n\tscript = {\n\t\tsrc: '',\n\t\tattributes: {},\n\t\tcallbacks: { onLoadCallback: null, onErrorCallback: null },\n\t\telementIdToAppend: null,\n\t},\n\tforcedStatus = undefined\n) => {\n\t// Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\n\tconst [status, setStatus] = useState(script.src ? 'loading' : 'idle')\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (forcedStatus) {\n\t\t\t\tsetStatus(forcedStatus)\n\t\t\t\treturn () => {\n\t\t\t\t\t// do nothing\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Allow falsy src value if waiting on other data needed for\n\t\t\t// constructing the script URL passed to this hook.\n\t\t\tif (!script.src) {\n\t\t\t\tsetStatus('idle')\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Fetch existing script element by src\n\t\t\t// It may have been added by another instance of this hook\n\t\t\tlet scriptToAdd = document.querySelector(`script[src=\"${script.src}\"]`)\n\t\t\tif (!scriptToAdd) {\n\t\t\t\t// Create script\n\t\t\t\tscriptToAdd = document.createElement('script')\n\t\t\t\tscriptToAdd.src = script.src\n\t\t\t\tscriptToAdd.async = true\n\t\t\t\tscriptToAdd.setAttribute('data-status', 'loading')\n\t\t\t\t// Add other script attributes, if they exist\n\t\t\t\tscript.attributes && Object.entries(script.attributes).length > 0\n\t\t\t\t\t? Object.entries(script.attributes).map(([key, value]) => scriptToAdd.setAttribute(key, value))\n\t\t\t\t\t: null\n\t\t\t\t// Add script to document body\n\t\t\t\tif (script.elementIdToAppend && document.getElementById(script.elementIdToAppend)) {\n\t\t\t\t\tdocument.getElementById(script.elementIdToAppend).appendChild(scriptToAdd)\n\t\t\t\t} else {\n\t\t\t\t\tdocument.body.appendChild(scriptToAdd)\n\t\t\t\t}\n\t\t\t\t// Store status in attribute on script\n\t\t\t\t// This can be read by other instances of this hook\n\t\t\t\tconst setAttributeFromEvent = (event) => {\n\t\t\t\t\tscriptToAdd.setAttribute('data-status', event.type === 'load' ? 'ready' : 'error')\n\t\t\t\t}\n\t\t\t\tscriptToAdd.addEventListener('load', setAttributeFromEvent)\n\t\t\t\tscriptToAdd.addEventListener('error', setAttributeFromEvent)\n\t\t\t} else {\n\t\t\t\t// Grab existing script status from attribute and set to state.\n\t\t\t\tconst currentScriptStatus = scriptToAdd.getAttribute('data-status')\n\t\t\t\tswitch (currentScriptStatus) {\n\t\t\t\t\tcase 'load':\n\t\t\t\t\tcase 'ready':\n\t\t\t\t\t\tscript.callbacks?.onLoadCallback ? script.callbacks.onLoadCallback() : null\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\tscript.callbacks?.onErrorCallback ? script.callbacks.onErrorCallback() : null\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// loading: do nothing\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tsetStatus(currentScriptStatus)\n\t\t\t}\n\t\t\t// Script event handler to update status in state\n\t\t\t// Note: Even if the script already exists we still need to add\n\t\t\t// event handlers to update the state for this hook instance.\n\t\t\tconst setStateFromEvent = (event) => {\n\t\t\t\tevent.type === 'load'\n\t\t\t\t\t? script.callbacks?.onLoadCallback\n\t\t\t\t\t\t? script.callbacks.onLoadCallback()\n\t\t\t\t\t\t: null\n\t\t\t\t\t: script.callbacks?.onErrorCallback\n\t\t\t\t\t? script.callbacks.onErrorCallback()\n\t\t\t\t\t: null\n\t\t\t\tsetStatus(event.type === 'load' ? 'ready' : 'error')\n\t\t\t}\n\t\t\t// Add event listeners\n\t\t\tscriptToAdd.addEventListener('load', setStateFromEvent)\n\t\t\tscriptToAdd.addEventListener('error', setStateFromEvent)\n\t\t\t// Remove event listeners on cleanup\n\t\t\treturn () => {\n\t\t\t\tif (scriptToAdd) {\n\t\t\t\t\tscriptToAdd.removeEventListener('load', setStateFromEvent)\n\t\t\t\t\tscriptToAdd.removeEventListener('error', setStateFromEvent)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Re-run useEffect if script changes\n\t\t[script, forcedStatus, status]\n\t)\n\n\treturn status\n}\n", "import { useScript } from './useScript'\n\n/**\n * @returns {\"idle\" | \"loading\" | \"ready\" | \"error\"} status\n */\nexport const useGoogleMaps = ({ apiKey, libraries = [], loadScriptExternally = false, status = 'idle', callback }) => {\n\t// eslint-disable-next-line no-undef\n\tif (typeof window !== 'undefined') window.googleMapsCallback = callback\n\tconst script = apiKey\n\t\t? {\n\t\t\t\tsrc: `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=googleMapsCallback&libraries=${libraries?.join(\n\t\t\t\t\t','\n\t\t\t\t)}`,\n\t\t\t\tattributes: { id: 'googleMapsApi' },\n\t\t  }\n\t\t: {\n\t\t\t\tsrc: `https://maps.googleapis.com/maps/api/js?callback=googleMapsCallback&libraries=${libraries?.join(',')}`,\n\t\t\t\tattributes: { id: 'googleMapsApi' },\n\t\t  }\n\n\treturn useScript(script, loadScriptExternally ? status : undefined)\n}\n", "export const isArraysEqualEps = (arrayA, arrayB, eps) => {\n\tif (arrayA && arrayB) {\n\t\tfor (let i = 0; i !== arrayA.length; ++i) {\n\t\t\tif (Math.abs(arrayA[i] - arrayB[i]) > eps) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\treturn false\n}\n", "import { useEffect, useRef } from 'react'\n\n/**\n * A hook that compares the previous and current values of a reference.\n * @param {any} value - the current value of the reference\n * @param {function} compare - a function that compares the previous and current values\n * @returns {any} the previous value of the reference\n * @ref https://usehooks.com/useMemoCompare/\n */\nconst useMemoCompare = (next, compare) => {\n\t// Ref for storing previous value\n\tconst previousRef = useRef()\n\tconst previous = previousRef.current\n\t// Pass previous and next value to compare function\n\t// to determine whether to consider them equal.\n\tconst isEqual = compare(previous, next)\n\t// If not equal update previousRef to next value.\n\t// We only update if not equal so that this hook continues to return\n\t// the same old value if compare keeps returning true.\n\tuseEffect(() => {\n\t\tif (!isEqual) {\n\t\t\tpreviousRef.current = next\n\t\t}\n\t})\n\t// Finally, if equal then return the previous value\n\treturn isEqual ? previous : next\n}\n\nexport default useMemoCompare\n", "import { element, number, object, shape, string } from 'prop-types'\n\n/**\n * @param {HTMLElement} container\n * @param {google.maps.MapPanes} pane\n * @param {google.maps.LatLng | google.maps.LatLngLiteral} position\n * @param {google.maps} maps\n * @returns {void}\n */\nconst createOverlay = ({ container, pane, position, maps }) => {\n\tclass Overlay extends maps.OverlayView {\n\t\tconstructor(container, pane, position) {\n\t\t\tsuper()\n\t\t\tthis.container = container\n\t\t\tthis.pane = pane\n\t\t\tthis.position = position\n\t\t}\n\n\t\t/**\n\t\t * onAdd is called when the map's panes are ready and the overlay has been\n\t\t * added to the map.\n\t\t */\n\t\tonAdd = () => {\n\t\t\t// Add the element to the pane.\n\t\t\tconst pane = this.getPanes()[this.pane]\n\t\t\tpane?.classList.add('google-map-markers-overlay')\n\t\t\tpane?.appendChild(this.container)\n\t\t}\n\n\t\tdraw = () => {\n\t\t\tconst projection = this.getProjection()\n\t\t\t// Computes the pixel coordinates of the given geographical location in the DOM element that holds the draggable map.\n\t\t\tconst point = projection.fromLatLngToDivPixel(this.position)\n\t\t\tif (point === null) return\n\t\t\tthis.container.style.transform = `translate(${point.x}px, ${point.y}px)`\n\t\t}\n\n\t\t/**\n\t\t * The onRemove() method will be called automatically from the API if\n\t\t * we ever set the overlay's map property to 'null'.\n\t\t */\n\t\tonRemove = () => {\n\t\t\tif (this.container.parentNode !== null) {\n\t\t\t\tthis.container.parentNode.removeChild(this.container)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn new Overlay(container, pane, position)\n}\n\ncreateOverlay.propTypes = {\n\t/**\n\t * The HTML container element for the overlay.\n\t */\n\tcontainer: element.isRequired,\n\t/**\n\t * The HTML container element for the overlay.\n\t * @ref [MapPanes](https://developers.google.com/maps/documentation/javascript/reference/overlay-view#MapPanes)\n\t * @default 'floatPane'\n\t * @type {google.maps.MapPanes}\n\t * @required\n\t */\n\tpane: string.isRequired,\n\t/**\n\t * The geographical location of the overlay.\n\t * @type {google.maps.LatLng | google.maps.LatLngLiteral}\n\t * @required\n\t * @ref [LatLng](https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLng)\n\t */\n\tposition: shape({\n\t\tlat: number.isRequired,\n\t\tlng: number.isRequired,\n\t}).isRequired,\n\t/**\n\t * The Google Maps API.\n\t */\n\tmaps: object.isRequired,\n}\n\nexport default createOverlay\n", "import { node, number, object, shape, string } from 'prop-types'\nimport { useEffect, useMemo } from 'react'\nimport { createPortal } from 'react-dom'\nimport useMemoCompare from '../hooks/useMemoCompare'\nimport createOverlay from './overlay'\n\n/**\n * @param {HTMLElement} container\n * @param {google.maps.MapPanes} pane - The pane on which to display the overlay. This is the Pane name, not the Pane itself. Defaults to floatPane.\n * @param {google.maps.LatLng | google.maps.LatLngLiteral} position\n * @returns {void}\n * @ref [MapPanes](https://developers.google.com/maps/documentation/javascript/reference/overlay-view#MapPanes)\n */\nconst OverlayView = ({ position, pane = 'floatPane', map, maps, zIndex, children }) => {\n\tconst container = useMemo(() => {\n\t\t// eslint-disable-next-line no-undef\n\t\tconst div = document.createElement('div')\n\t\tdiv.style.position = 'absolute'\n\t\treturn div\n\t}, [])\n\n\tconst overlay = useMemo(() => {\n\t\treturn createOverlay({ container, pane, position, maps })\n\t}, [container, maps, pane, position])\n\n\t// Because React does not do deep comparisons, a custom hook is used.\n\t// This fixes the issue where the overlay is not updated when the position changes.\n\tconst childrenProps = useMemoCompare(children?.props, (prev, next) => {\n\t\treturn prev && prev.lat === next.lat && prev.lng === next.lng\n\t})\n\n\tuseEffect(() => {\n\t\tif (!overlay.map) {\n\t\t\toverlay?.setMap(map)\n\t\t\treturn () => {\n\t\t\t\toverlay?.setMap(null)\n\t\t\t}\n\t\t}\n\t\t// overlay depends on map, so we don't need to add it to the dependency array\n\t\t// otherwise, it will re-render the overlay every time the map changes\n\t\t//? added childrenProps to the dependency array to re-render the overlay when the children props change.\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [map, childrenProps])\n\n\t// to move the container to the foreground and background\n\tuseEffect(() => {\n\t\tcontainer.style.zIndex = `${zIndex}`\n\t}, [zIndex, container])\n\n\treturn createPortal(children, container)\n}\n\nOverlayView.defaultProps = {\n\tzIndex: 0,\n}\n\nOverlayView.propTypes = {\n\t/**\n\t * The HTML container element for the overlay.\n\t * @ref [MapPanes](https://developers.google.com/maps/documentation/javascript/reference/overlay-view#MapPanes)\n\t * @default 'floatPane'\n\t * @type {google.maps.MapPanes}\n\t */\n\tpane: string,\n\t/**\n\t * The geographical location of the overlay.\n\t * @type {google.maps.LatLng | google.maps.LatLngLiteral}\n\t * @required\n\t * @ref [LatLng](https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLng)\n\t */\n\tposition: shape({\n\t\tlat: number.isRequired,\n\t\tlng: number.isRequired,\n\t}).isRequired,\n\t/**\n\t * The map on which to display the overlay.\n\t * @type {google.maps.Map}\n\t * @required\n\t * @ref [Map](https://developers.google.com/maps/documentation/javascript/reference/map#Map)\n\t */\n\tmap: object.isRequired,\n\t/**\n\t * The Google Maps API.\n\t * @type {object}\n\t * @required\n\t * @ref [Google Maps API](https://developers.google.com/maps/documentation/javascript/reference)\n\t */\n\tmaps: object.isRequired,\n\t/**\n\t * The z-index of the overlay.\n\t * @type {number}\n\t * @default 0\n\t */\n\tzIndex: number,\n\t/**\n\t * The children of the OverlayView.\n\t * @type {ReactNode}\n\t * @required\n\t * @ref [ReactNode](https://reactjs.org/docs/react-api.html#reactnode)\n\t */\n\tchildren: node.isRequired,\n}\n\nexport default OverlayView\n", "import { node, object } from 'prop-types'\nimport React, { Children, isValidElement, useMemo } from 'react'\nimport OverlayView from './overlay-view'\n\nconst MapMarkers = ({ children, map, maps }) => {\n\tconst markers = useMemo(() => {\n\t\tif (!map || !maps) return []\n\n\t\treturn Children.map(children, (child) => {\n\t\t\tif (isValidElement(child)) {\n\t\t\t\tconst latLng = { lat: child.props.lat, lng: child.props.lng }\n\t\t\t\tconst zIndex = child.props.zIndex || undefined\n\n\t\t\t\t// set the map prop on the child component\n\t\t\t\treturn (\n\t\t\t\t\t<OverlayView position={latLng} map={map} maps={maps} zIndex={zIndex}>\n\t\t\t\t\t\t{child}\n\t\t\t\t\t</OverlayView>\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t}, [children, map, maps])\n\n\treturn <div>{markers}</div>\n}\n\nMapMarkers.propTypes = {\n\t/**\n\t * The Markers on the Map.\n\t * @type {ReactNode}\n\t * @required\n\t */\n\tchildren: node.isRequired,\n\t/**\n\t * The Google Maps instance.\n\t * @type {object}\n\t * @required\n\t */\n\tmap: object,\n\t/**\n\t * The Google Maps API.\n\t * @type {object}\n\t * @required\n\t */\n\tmaps: object.isRequired,\n}\n\nexport default MapMarkers\n", "import { arrayOf, func, node, number, object, oneOfType, shape, string } from 'prop-types'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { isArraysEqualEps } from '../utils/utils'\nimport MapMarkers from './markers'\n\nconst EPS = 0.00001\n\nconst MapComponent = ({\n\tchildren,\n\tstyle,\n\tdefaultCenter,\n\tdefaultZoom,\n\tonGoogleApiLoaded,\n\tonChange,\n\toptions,\n\tevents,\n}) => {\n\tconst mapRef = useRef(null)\n\tconst prevBoundsRef = useRef(null)\n\tconst [map, setMap] = useState(null)\n\tconst [maps, setMaps] = useState(null)\n\tconst [googleApiCalled, setGoogleApiCalled] = useState(false)\n\n\tconst onIdle = useCallback(() => {\n\t\ttry {\n\t\t\tconst zoom = map.getZoom()\n\t\t\tconst bounds = map.getBounds()\n\t\t\tconst centerLatLng = map.getCenter()\n\n\t\t\tconst ne = bounds.getNorthEast()\n\t\t\tconst sw = bounds.getSouthWest()\n\t\t\tconst boundsArray = [sw.lng(), sw.lat(), ne.lng(), ne.lat()]\n\n\t\t\tif (!isArraysEqualEps(boundsArray, prevBoundsRef.current, EPS)) {\n\t\t\t\tif (onChange) {\n\t\t\t\t\tonChange({\n\t\t\t\t\t\tzoom,\n\t\t\t\t\t\tcenter: [centerLatLng.lng(), centerLatLng.lat()],\n\t\t\t\t\t\tbounds,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tprevBoundsRef.current = boundsArray\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t}\n\t}, [map, onChange])\n\n\tuseEffect(() => {\n\t\tif (mapRef.current && !map) {\n\t\t\tsetMap(\n\t\t\t\tnew window.google.maps.Map(mapRef.current, {\n\t\t\t\t\tcenter: defaultCenter,\n\t\t\t\t\tzoom: defaultZoom,\n\t\t\t\t\t...options,\n\t\t\t\t})\n\t\t\t)\n\t\t\tsetMaps(window.google.maps)\n\t\t}\n\t}, [defaultCenter, defaultZoom, map, mapRef, options])\n\n\tuseEffect(() => {\n\t\tif (map) {\n\t\t\tif (!googleApiCalled) {\n\t\t\t\tonGoogleApiLoaded({ map, maps, ref: mapRef.current })\n\t\t\t\tsetGoogleApiCalled(true)\n\t\t\t}\n\n\t\t\twindow.google.maps.event.clearListeners(map, 'idle')\n\t\t\t// Idle event is fired when the map becomes idle after panning or zooming.\n\t\t\twindow.google.maps.event.addListener(map, 'idle', onIdle)\n\t\t}\n\t}, [googleApiCalled, map, maps, onChange, onGoogleApiLoaded, onIdle])\n\n\tuseEffect(() => {\n\t\t// clear listeners on unmount\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\twindow.google.maps.event.clearListeners(map, 'idle')\n\t\t\t}\n\t\t}\n\t}, [map])\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div\n\t\t\t\tref={mapRef}\n\t\t\t\tstyle={style}\n\t\t\t\tclassName=\"google-map\"\n\t\t\t\t// spread the events as props\n\t\t\t\t{...events?.reduce((acc, { name, handler } = {}) => {\n\t\t\t\t\tacc[name] = handler\n\t\t\t\t\treturn acc\n\t\t\t\t}, {})}\n\t\t\t/>\n\t\t\t{children && map && maps && (\n\t\t\t\t<MapMarkers map={map} maps={maps}>\n\t\t\t\t\t{children}\n\t\t\t\t</MapMarkers>\n\t\t\t)}\n\t\t</React.Fragment>\n\t)\n}\n\nMapComponent.defaultProps = {\n\tstyle: {\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tleft: 0,\n\t\ttop: 0,\n\t\tmargin: 0,\n\t\tpadding: 0,\n\t\tposition: 'absolute',\n\t},\n\tonGoogleApiLoaded: () => {},\n\tonChange: () => {},\n\toptions: {},\n\tevents: [],\n}\n\nMapComponent.propTypes = {\n\t/**\n\t * The Markers on the Map.\n\t */\n\tchildren: oneOfType([arrayOf(node), node]),\n\tstyle: object,\n\tdefaultCenter: object.isRequired,\n\tdefaultZoom: number.isRequired,\n\tonGoogleApiLoaded: func,\n\tonChange: func,\n\toptions: object,\n\t/**\n\t * The events to pass to the Google Maps instance (`div`).\n\t * @type {Array}\n\t * @example\n\t * [\n\t *  {\n\t *   name: 'onClick',\n\t *   handler: (event) => { ... }\n\t *  }\n\t * ]\n\t */\n\tevents: arrayOf(\n\t\tshape({\n\t\t\tname: string.isRequired,\n\t\t\thandler: func.isRequired,\n\t\t})\n\t),\n}\n\nexport default MapComponent\n", "import { arrayOf, bool, func, node, number, object, oneOf, oneOfType, string } from 'prop-types'\nimport React, { forwardRef } from 'react'\nimport { useGoogleMaps } from './hooks/useGoogleMaps'\nimport MapComponent from './map/map'\n\nconst GoogleMap = forwardRef(function GoogleMap(\n\t{\n\t\tapiKey,\n\t\tlibraries,\n\t\tchildren,\n\t\tloadingContent,\n\t\tidleContent,\n\t\terrorContent,\n\t\tmapMinHeight,\n\t\tcontainerProps,\n\t\tloadScriptExternally,\n\t\tstatus,\n\t\tscriptCallback,\n\t\t...props\n\t},\n\tref\n) {\n\tconst renderers = {\n\t\tready: <MapComponent {...props}>{children}</MapComponent>,\n\t\tloading: loadingContent,\n\t\tidle: idleContent,\n\t\terror: errorContent,\n\t}\n\n\tconst _status = useGoogleMaps({ apiKey, libraries, loadScriptExternally, status, callback: scriptCallback })\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{ height: '100%', width: '100%', overflow: 'hidden', position: 'relative', minHeight: mapMinHeight }}\n\t\t\tref={ref}\n\t\t\t{...containerProps}\n\t\t>\n\t\t\t{renderers[_status] || null}\n\t\t</div>\n\t)\n})\n\nGoogleMap.defaultProps = {\n\t...MapComponent.defaultProps,\n\tloadingContent: 'Google Maps is loading',\n\tidleContent: 'Google Maps is on idle',\n\terrorContent: 'Google Maps is on error',\n\tmapMinHeight: 'unset',\n\tapiKey: '',\n\tlibraries: ['places', 'geometry'],\n\tloadScriptExternally: false,\n\tstatus: 'idle',\n\tscriptCallback: () => {},\n}\n\nGoogleMap.propTypes = {\n\t...MapComponent.propTypes,\n\t/**\n\t * The Markers on the Map.\n\t */\n\tchildren: oneOfType([node, arrayOf(node)]),\n\t/**\n\t * Content to be displayed while the map is loading.\n\t */\n\tloadingContent: node,\n\t/**\n\t * Content to be displayed while the map is idle.\n\t */\n\tidleContent: node,\n\t/**\n\t * Content to be displayed when there is an error loading the map.\n\t */\n\terrorContent: node,\n\t/**\n\t * The minimum height of the map.\n\t */\n\tmapMinHeight: oneOfType([number, string]),\n\t/**\n\t * Props to be passed to the container div.\n\t */\n\tcontainerProps: object,\n\t/**\n\t * Whether to load the Google Maps script externally.\n\t * If true, the status prop will be used to control the loading of the script.\n\t * If false, the script will be loaded automatically.\n\t * @default false\n\t */\n\tloadScriptExternally: bool,\n\t/**\n\t * The forced status of the Google Maps script.\n\t * @default 'idle'\n\t */\n\tstatus: oneOf(['idle', 'loading', 'ready', 'error']),\n\t/**\n\t * The callback function to pass to the Google Maps script.\n\t * @default () => {}\n\t */\n\tscriptCallback: func,\n}\n\nexport default GoogleMap\n"],
  "mappings": "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",
  "names": ["useScript", "script", "forcedStatus", "src", "attributes", "callbacks", "onLoadCallback", "onErrorCallback", "elementIdToAppend", "undefined", "_useState", "useState", "status", "setStatus", "useEffect", "_script$callbacks", "_script$callbacks2", "scriptToAdd", "document", "querySelector", "createElement", "async", "setAttribute", "Object", "entries", "length", "map", "_ref", "key", "value", "getElementById", "appendChild", "body", "setAttributeFromEvent", "event", "type", "addEventListener", "currentScriptStatus", "getAttribute", "setStateFromEvent", "_script$callbacks3", "_script$callbacks4", "removeEventListener", "useGoogleMaps", "apiKey", "_ref$libraries", "libraries", "_ref$loadScriptExtern", "loadScriptExternally", "_ref$status", "callback", "window", "googleMapsCallback", "join", "id", "isArraysEqualEps", "arrayA", "arrayB", "eps", "i", "Math", "abs", "useMemoCompare", "next", "compare", "previousRef", "useRef", "previous", "current", "isEqual", "createOverlay", "container", "pane", "position", "maps", "Overlay", "_maps$OverlayView", "_inheritsLoose", "_this", "call", "onAdd", "getPanes", "classList", "add", "draw", "projection", "getProjection", "point", "fromLatLngToDivPixel", "style", "transform", "x", "y", "onRemove", "parentNode", "removeChild", "OverlayView", "propTypes", "element", "isRequired", "string", "shape", "lat", "number", "lng", "object", "_ref$pane", "zIndex", "children", "useMemo", "div", "overlay", "childrenProps", "props", "prev", "setMap", "createPortal", "defaultProps", "node", "MapMarkers", "markers", "Children", "child", "isValidElement", "latLng", "React", "EPS", "MapComponent", "defaultCenter", "defaultZoom", "onGoogleApiLoaded", "onChange", "options", "events", "mapRef", "prevBoundsRef", "_useState2", "setMaps", "_useState3", "googleApiCalled", "setGoogleApiCalled", "onIdle", "useCallback", "zoom", "getZoom", "bounds", "getBounds", "centerLatLng", "getCenter", "ne", "getNorthEast", "sw", "getSouthWest", "boundsArray", "center", "e", "console", "error", "google", "Map", "_extends", "ref", "clearListeners", "addListener", "Fragment", "className", "reduce", "acc", "_temp", "_ref2", "name", "handler", "width", "height", "left", "top", "margin", "padding", "oneOfType", "arrayOf", "func", "GoogleMap", "forwardRef", "loadingContent", "idleContent", "errorContent", "mapMinHeight", "containerProps", "scriptCallback", "_objectWithoutPropertiesLoose", "_excluded", "renderers", "ready", "loading", "idle", "_status", "overflow", "minHeight", "bool", "oneOf"]
}
