import {
  require_prop_types
} from "./chunk-PUHH75AR.js";
import {
  require_react_dom
} from "./chunk-CIQVVTPY.js";
import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/google-maps-react-markers/dist/index.modern.js
var import_prop_types = __toESM(require_prop_types());
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var useScript = function useScript2(script, forcedStatus) {
  if (script === void 0) {
    script = {
      src: "",
      attributes: {},
      callbacks: {
        onLoadCallback: null,
        onErrorCallback: null
      },
      elementIdToAppend: null
    };
  }
  if (forcedStatus === void 0) {
    forcedStatus = void 0;
  }
  var _useState = (0, import_react.useState)(script.src ? "loading" : "idle"), status = _useState[0], setStatus = _useState[1];
  (0, import_react.useEffect)(function() {
    var _script$callbacks, _script$callbacks2;
    if (forcedStatus) {
      setStatus(forcedStatus);
      return function() {
      };
    }
    if (!script.src) {
      setStatus("idle");
      return;
    }
    var scriptToAdd = document.querySelector('script[src="' + script.src + '"]');
    if (!scriptToAdd) {
      scriptToAdd = document.createElement("script");
      scriptToAdd.src = script.src;
      scriptToAdd.async = true;
      scriptToAdd.setAttribute("data-status", "loading");
      script.attributes && Object.entries(script.attributes).length > 0 ? Object.entries(script.attributes).map(function(_ref) {
        var key = _ref[0], value = _ref[1];
        return scriptToAdd.setAttribute(key, value);
      }) : null;
      if (script.elementIdToAppend && document.getElementById(script.elementIdToAppend)) {
        document.getElementById(script.elementIdToAppend).appendChild(scriptToAdd);
      } else {
        document.body.appendChild(scriptToAdd);
      }
      var setAttributeFromEvent = function setAttributeFromEvent2(event) {
        scriptToAdd.setAttribute("data-status", event.type === "load" ? "ready" : "error");
      };
      scriptToAdd.addEventListener("load", setAttributeFromEvent);
      scriptToAdd.addEventListener("error", setAttributeFromEvent);
    } else {
      var currentScriptStatus = scriptToAdd.getAttribute("data-status");
      switch (currentScriptStatus) {
        case "load":
        case "ready":
          (_script$callbacks = script.callbacks) !== null && _script$callbacks !== void 0 && _script$callbacks.onLoadCallback ? script.callbacks.onLoadCallback() : null;
          break;
        case "error":
          (_script$callbacks2 = script.callbacks) !== null && _script$callbacks2 !== void 0 && _script$callbacks2.onErrorCallback ? script.callbacks.onErrorCallback() : null;
          break;
      }
      setStatus(currentScriptStatus);
    }
    var setStateFromEvent = function setStateFromEvent2(event) {
      var _script$callbacks3, _script$callbacks4;
      event.type === "load" ? (_script$callbacks3 = script.callbacks) !== null && _script$callbacks3 !== void 0 && _script$callbacks3.onLoadCallback ? script.callbacks.onLoadCallback() : null : (_script$callbacks4 = script.callbacks) !== null && _script$callbacks4 !== void 0 && _script$callbacks4.onErrorCallback ? script.callbacks.onErrorCallback() : null;
      setStatus(event.type === "load" ? "ready" : "error");
    };
    scriptToAdd.addEventListener("load", setStateFromEvent);
    scriptToAdd.addEventListener("error", setStateFromEvent);
    return function() {
      if (scriptToAdd) {
        scriptToAdd.removeEventListener("load", setStateFromEvent);
        scriptToAdd.removeEventListener("error", setStateFromEvent);
      }
    };
  }, [script, forcedStatus, status]);
  return status;
};
var useGoogleMaps = function useGoogleMaps2(_ref) {
  var apiKey = _ref.apiKey, _ref$libraries = _ref.libraries, libraries = _ref$libraries === void 0 ? [] : _ref$libraries, _ref$loadScriptExtern = _ref.loadScriptExternally, loadScriptExternally = _ref$loadScriptExtern === void 0 ? false : _ref$loadScriptExtern, _ref$status = _ref.status, status = _ref$status === void 0 ? "idle" : _ref$status, callback = _ref.callback;
  if (typeof window !== "undefined")
    window.googleMapsCallback = callback;
  var script = apiKey ? {
    src: "https://maps.googleapis.com/maps/api/js?key=" + apiKey + "&callback=googleMapsCallback&libraries=" + (libraries === null || libraries === void 0 ? void 0 : libraries.join(",")),
    attributes: {
      id: "googleMapsApi"
    }
  } : {
    src: "https://maps.googleapis.com/maps/api/js?callback=googleMapsCallback&libraries=" + (libraries === null || libraries === void 0 ? void 0 : libraries.join(",")),
    attributes: {
      id: "googleMapsApi"
    }
  };
  return useScript(script, loadScriptExternally ? status : void 0);
};
var isArraysEqualEps = function isArraysEqualEps2(arrayA, arrayB, eps) {
  if (arrayA && arrayB) {
    for (var i = 0; i !== arrayA.length; ++i) {
      if (Math.abs(arrayA[i] - arrayB[i]) > eps) {
        return false;
      }
    }
    return true;
  }
  return false;
};
var useMemoCompare = function useMemoCompare2(next, compare) {
  var previousRef = (0, import_react.useRef)();
  var previous = previousRef.current;
  var isEqual = compare(previous, next);
  (0, import_react.useEffect)(function() {
    if (!isEqual) {
      previousRef.current = next;
    }
  });
  return isEqual ? previous : next;
};
var createOverlay = function createOverlay2(_ref) {
  var container = _ref.container, pane = _ref.pane, position = _ref.position, maps = _ref.maps;
  var Overlay = function(_maps$OverlayView) {
    _inheritsLoose(Overlay2, _maps$OverlayView);
    function Overlay2(container2, _pane, position2) {
      var _this;
      _this = _maps$OverlayView.call(this) || this;
      _this.onAdd = function() {
        var pane2 = _this.getPanes()[_this.pane];
        pane2 === null || pane2 === void 0 ? void 0 : pane2.classList.add("google-map-markers-overlay");
        pane2 === null || pane2 === void 0 ? void 0 : pane2.appendChild(_this.container);
      };
      _this.draw = function() {
        var projection = _this.getProjection();
        var point = projection.fromLatLngToDivPixel(_this.position);
        if (point === null)
          return;
        _this.container.style.transform = "translate(" + point.x + "px, " + point.y + "px)";
      };
      _this.onRemove = function() {
        if (_this.container.parentNode !== null) {
          _this.container.parentNode.removeChild(_this.container);
        }
      };
      _this.container = container2;
      _this.pane = _pane;
      _this.position = position2;
      return _this;
    }
    return Overlay2;
  }(maps.OverlayView);
  return new Overlay(container, pane, position);
};
createOverlay.propTypes = {
  container: import_prop_types.element.isRequired,
  pane: import_prop_types.string.isRequired,
  position: (0, import_prop_types.shape)({
    lat: import_prop_types.number.isRequired,
    lng: import_prop_types.number.isRequired
  }).isRequired,
  maps: import_prop_types.object.isRequired
};
var OverlayView = function OverlayView2(_ref) {
  var position = _ref.position, _ref$pane = _ref.pane, pane = _ref$pane === void 0 ? "floatPane" : _ref$pane, map = _ref.map, maps = _ref.maps, zIndex = _ref.zIndex, children = _ref.children;
  var container = (0, import_react.useMemo)(function() {
    var div = document.createElement("div");
    div.style.position = "absolute";
    return div;
  }, []);
  var overlay = (0, import_react.useMemo)(function() {
    return createOverlay({
      container,
      pane,
      position,
      maps
    });
  }, [container, maps, pane, position]);
  var childrenProps = useMemoCompare(children === null || children === void 0 ? void 0 : children.props, function(prev, next) {
    return prev && prev.lat === next.lat && prev.lng === next.lng;
  });
  (0, import_react.useEffect)(function() {
    if (!overlay.map) {
      overlay === null || overlay === void 0 ? void 0 : overlay.setMap(map);
      return function() {
        overlay === null || overlay === void 0 ? void 0 : overlay.setMap(null);
      };
    }
  }, [map, childrenProps]);
  (0, import_react.useEffect)(function() {
    container.style.zIndex = "" + zIndex;
  }, [zIndex, container]);
  return (0, import_react_dom.createPortal)(children, container);
};
OverlayView.defaultProps = {
  zIndex: 0
};
OverlayView.propTypes = {
  pane: import_prop_types.string,
  position: (0, import_prop_types.shape)({
    lat: import_prop_types.number.isRequired,
    lng: import_prop_types.number.isRequired
  }).isRequired,
  map: import_prop_types.object.isRequired,
  maps: import_prop_types.object.isRequired,
  zIndex: import_prop_types.number,
  children: import_prop_types.node.isRequired
};
var MapMarkers = function MapMarkers2(_ref) {
  var children = _ref.children, map = _ref.map, maps = _ref.maps;
  var markers = (0, import_react.useMemo)(function() {
    if (!map || !maps)
      return [];
    return import_react.Children.map(children, function(child) {
      if ((0, import_react.isValidElement)(child)) {
        var latLng = {
          lat: child.props.lat,
          lng: child.props.lng
        };
        var zIndex = child.props.zIndex || void 0;
        return import_react.default.createElement(OverlayView, {
          position: latLng,
          map,
          maps,
          zIndex
        }, child);
      }
    });
  }, [children, map, maps]);
  return import_react.default.createElement("div", null, markers);
};
MapMarkers.propTypes = {
  children: import_prop_types.node.isRequired,
  map: import_prop_types.object,
  maps: import_prop_types.object.isRequired
};
var EPS = 1e-5;
var MapComponent = function MapComponent2(_ref) {
  var children = _ref.children, style = _ref.style, defaultCenter = _ref.defaultCenter, defaultZoom = _ref.defaultZoom, onGoogleApiLoaded2 = _ref.onGoogleApiLoaded, onChange2 = _ref.onChange, options = _ref.options, events = _ref.events;
  var mapRef = (0, import_react.useRef)(null);
  var prevBoundsRef = (0, import_react.useRef)(null);
  var _useState = (0, import_react.useState)(null), map = _useState[0], setMap = _useState[1];
  var _useState2 = (0, import_react.useState)(null), maps = _useState2[0], setMaps = _useState2[1];
  var _useState3 = (0, import_react.useState)(false), googleApiCalled = _useState3[0], setGoogleApiCalled = _useState3[1];
  var onIdle = (0, import_react.useCallback)(function() {
    try {
      var zoom = map.getZoom();
      var bounds = map.getBounds();
      var centerLatLng = map.getCenter();
      var ne = bounds.getNorthEast();
      var sw = bounds.getSouthWest();
      var boundsArray = [sw.lng(), sw.lat(), ne.lng(), ne.lat()];
      if (!isArraysEqualEps(boundsArray, prevBoundsRef.current, EPS)) {
        if (onChange2) {
          onChange2({
            zoom,
            center: [centerLatLng.lng(), centerLatLng.lat()],
            bounds
          });
        }
        prevBoundsRef.current = boundsArray;
      }
    } catch (e) {
      console.error(e);
    }
  }, [map, onChange2]);
  (0, import_react.useEffect)(function() {
    if (mapRef.current && !map) {
      setMap(new window.google.maps.Map(mapRef.current, _extends({
        center: defaultCenter,
        zoom: defaultZoom
      }, options)));
      setMaps(window.google.maps);
    }
  }, [defaultCenter, defaultZoom, map, mapRef, options]);
  (0, import_react.useEffect)(function() {
    if (map) {
      if (!googleApiCalled) {
        onGoogleApiLoaded2({
          map,
          maps,
          ref: mapRef.current
        });
        setGoogleApiCalled(true);
      }
      window.google.maps.event.clearListeners(map, "idle");
      window.google.maps.event.addListener(map, "idle", onIdle);
    }
  }, [googleApiCalled, map, maps, onChange2, onGoogleApiLoaded2, onIdle]);
  (0, import_react.useEffect)(function() {
    return function() {
      if (map) {
        window.google.maps.event.clearListeners(map, "idle");
      }
    };
  }, [map]);
  return import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement("div", _extends({
    ref: mapRef,
    style,
    className: "google-map"
  }, events === null || events === void 0 ? void 0 : events.reduce(function(acc, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp, name = _ref2.name, handler = _ref2.handler;
    acc[name] = handler;
    return acc;
  }, {}))), children && map && maps && import_react.default.createElement(MapMarkers, {
    map,
    maps
  }, children));
};
MapComponent.defaultProps = {
  style: {
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
    margin: 0,
    padding: 0,
    position: "absolute"
  },
  onGoogleApiLoaded: function onGoogleApiLoaded() {
  },
  onChange: function onChange() {
  },
  options: {},
  events: []
};
MapComponent.propTypes = {
  children: (0, import_prop_types.oneOfType)([(0, import_prop_types.arrayOf)(import_prop_types.node), import_prop_types.node]),
  style: import_prop_types.object,
  defaultCenter: import_prop_types.object.isRequired,
  defaultZoom: import_prop_types.number.isRequired,
  onGoogleApiLoaded: import_prop_types.func,
  onChange: import_prop_types.func,
  options: import_prop_types.object,
  events: (0, import_prop_types.arrayOf)((0, import_prop_types.shape)({
    name: import_prop_types.string.isRequired,
    handler: import_prop_types.func.isRequired
  }))
};
var _excluded = ["apiKey", "libraries", "children", "loadingContent", "idleContent", "errorContent", "mapMinHeight", "containerProps", "loadScriptExternally", "status", "scriptCallback"];
var GoogleMap = (0, import_react.forwardRef)(function GoogleMap2(_ref, ref) {
  var apiKey = _ref.apiKey, libraries = _ref.libraries, children = _ref.children, loadingContent = _ref.loadingContent, idleContent = _ref.idleContent, errorContent = _ref.errorContent, mapMinHeight = _ref.mapMinHeight, containerProps = _ref.containerProps, loadScriptExternally = _ref.loadScriptExternally, status = _ref.status, scriptCallback2 = _ref.scriptCallback, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  var renderers = {
    ready: import_react.default.createElement(MapComponent, props, children),
    loading: loadingContent,
    idle: idleContent,
    error: errorContent
  };
  var _status = useGoogleMaps({
    apiKey,
    libraries,
    loadScriptExternally,
    status,
    callback: scriptCallback2
  });
  return import_react.default.createElement("div", _extends({
    style: {
      height: "100%",
      width: "100%",
      overflow: "hidden",
      position: "relative",
      minHeight: mapMinHeight
    },
    ref
  }, containerProps), renderers[_status] || null);
});
GoogleMap.defaultProps = _extends({}, MapComponent.defaultProps, {
  loadingContent: "Google Maps is loading",
  idleContent: "Google Maps is on idle",
  errorContent: "Google Maps is on error",
  mapMinHeight: "unset",
  apiKey: "",
  libraries: ["places", "geometry"],
  loadScriptExternally: false,
  status: "idle",
  scriptCallback: function scriptCallback() {
  }
});
GoogleMap.propTypes = _extends({}, MapComponent.propTypes, {
  children: (0, import_prop_types.oneOfType)([import_prop_types.node, (0, import_prop_types.arrayOf)(import_prop_types.node)]),
  loadingContent: import_prop_types.node,
  idleContent: import_prop_types.node,
  errorContent: import_prop_types.node,
  mapMinHeight: (0, import_prop_types.oneOfType)([import_prop_types.number, import_prop_types.string]),
  containerProps: import_prop_types.object,
  loadScriptExternally: import_prop_types.bool,
  status: (0, import_prop_types.oneOf)(["idle", "loading", "ready", "error"]),
  scriptCallback: import_prop_types.func
});
var index_modern_default = GoogleMap;
export {
  index_modern_default as default
};
//# sourceMappingURL=google-maps-react-markers.js.map
